#export ROBOT_ID=robot
export ROBOT_ID=rbkairos
# summit_xl, rbkairos
export ROBOT_MODEL=rbkairos
# summit_xl_std.urdf.xacro
export ROBOT_XACRO=rbkairos_extension_ur16e.urdf.xacro
#export ROBOT_XACRO=rb_kairos_ur5e_oem.urdf.xacro


# true, false
export ROBOT_HAS_FRONT_LASER=true
# sick_tim561, hokuyo, ydlidar_f4, sick_s300, sick_microscan3
export ROBOT_FRONT_LASER_MODEL=hokuyo
#export ROBOT_FRONT_LASER_PORT=/dev/ttyACM0
export ROBOT_FRONT_LASER_IP=192.168.4.10

# true, false
export ROBOT_HAS_REAR_LASER=true
# sick_tim561, hokuyo, ydlidar_f4, sick_s300, sick_microscan3
export ROBOT_REAR_LASER_MODEL=hokuyo
#export ROBOT_REAR_LASER_PORT=/dev/ttyACM1
export ROBOT_REAR_LASER_IP=192.168.4.11
# Merge laser scans? (true/false)
export ROBOT_MERGE_LASERS=true

# true, false
export ROBOT_HAS_BENEWAKE=false
export ROBOT_BENEWAKE_IP=192.168.0.20

# true, false
export ROBOT_HAS_RS_LIDAR_16=false

# true, false
export ROBOT_HAS_FRONT_PTZ_CAMERA=false
export ROBOT_FRONT_PTZ_CAMERA_IP=192.168.0.185
export ROBOT_FRONT_PTZ_CAMERA_MODEL=axis_m5013

# true, false
export ROBOT_HAS_REAR_PTZ_CAMERA=false
export ROBOT_REAR_PTZ_CAMERA_IP=192.168.0.186
export ROBOT_REAR_PTZ_CAMERA_MODEL=axis_m5013

# true, false
export ROBOT_HAS_FRONT_RGBD_CAMERA=true
# usb bus
#export ROBOT_FRONT_RGBD_CAMERA_ID=#1
# orbbec, zed
export ROBOT_FRONT_RGBD_CAMERA_MODEL=orbbec
# true, false
export ROBOT_FRONT_RGBD_CAMERA_IS_REMOTE=false
# jetson-robotnik
export ROBOT_FRONT_RGBD_CAMERA_MACHINE_NAME=jetson-robotnik


# true, false
export ROBOT_HAS_REAR_RGBD_CAMERA=false
# usb bus
#export ROBOT_REAR_RGBD_CAMERA_ID=#1
# orbbec, zed
export ROBOT_REAR_RGBD_CAMERA_MODEL=orbbec
# true, false
export ROBOT_REAR_RGBD_CAMERA_IS_REMOTE=false
# jetson-robotnik
export ROBOT_REAR_RGBD_CAMERA_MACHINE_NAME=jetson-robotnik


# pixhawk, vectornav, myahrs
export ROBOT_IMU_MODEL=pixhawk
export ROBOT_IMU_PORT=/dev/ttyUSB_IMU
# true, false
export ROBOT_HAS_GPS=false #it was true, hrii removed it temporarily
# ublox, generic_gps
export ROBOT_GPS_MODEL=ublox
# c099_f9p_rover, c94_m8t_rover
export ROBOT_GPS_CONFIG=c099_f9p_rover


# ps3, ps4 (default)
export ROBOT_PAD_MODEL=ps4
# 24V motors: 12.52, 48V motors: 9.56
export ROBOT_GEARBOX=9.56
# true, false
export ROBOT_HAS_ENCODER=true
# skid, omni
export ROBOT_KINEMATICS=omni
# Flag to set if the robot is differential
export ROBOT_DIFFERENTIAL_KINEMATICS=false
# std diameters: 0.22 rubber wheel, 0.25 mecanuum wheel
export ROBOT_WHEEL_DIAMETER=0.2556
# summit_xl: 0.462, summit_xl_steel: 0.477, rbkairos_10: 0.538
export ROBOT_TRACK_WIDTH=0.538
# true, false
export ROBOT_HAS_SAFETY_MODULE=false
# 
# export ROBOT_MODBUS_SERVER_IP=192.168.0.250

# ARM 
# true, false
export ROBOT_HAS_ARM=false
# Robot arm ip
export ROBOT_ARM_IP=192.168.0.210
# For UR arms. Allows just running the driver to read the state or control the arm
export ROBOT_ARM_ENABLE_TRAJECTORY_CONTROL=false
#export ROBOT_ARM_ENABLE_TRAJECTORY_CONTROL=true

# ARM model (ur5, ur10)
export ROBOT_ARM_MODEL=ur5

# WRIST RGBD CAMERA
# true, false
export ROBOT_HAS_WRIST_RGBD_CAMERA=false
# usb bus
#export ROBOT_WRIST_RGBD_CAMERA_ID=#1
# realsense
export ROBOT_WRIST_RGBD_CAMERA_MODEL=realsense

#GRIPPER
# true, false
export ROBOT_HAS_GRIPPER=false
# egh, wsg50
export ROBOT_GRIPPER_MODEL=egh
# schunk (egh)
export ROBOT_GRIPPER_MANUFACTURER=schunk
export ROBOT_GRIPPER_IP=192.168.0.212
export ROBOT_GRIPPER_PORT=1000
# For UR arms. Allows to control the gripper using UR IO. The arm will need a program
# running to manage the gripper control.
export ROBOT_CONTROL_GRIPPER_BY_SIGNALS=false

# WEB VIDEO SERVER
export ROBOT_LAUNCH_WEB_VIDEO_SERVER=true
export ROBOT_WEB_VIDEO_SERVER_ADDRESS=127.0.0.1
export ROBOT_WEB_VIDEO_SERVER_PORT=8081

# RUN SCREENS (true, false)
export ROBOT_RUN_MAP_NAV_MANAGER=false
export ROBOT_RUN_ROBOT_LOCAL_CONTROL=false
export ROBOT_RUN_PERCEPTION=false
export ROBOT_RUN_NAVIGATION=false
export ROBOT_RUN_RLC_ROSTFUL_SERVER=false


# PERCEPTION PARAMETERS
# true, false
export ROBOT_RUN_AR_LOCATOR=false
# true, false
export ROBOT_RUN_REFLECTOR_LOCATOR=true
# default, hokuyo_utm, hokuyo_ust, sick_s300, sick_microscan3
export ROBOT_LASER_MODEL_INTENSITY_FILTER=hokuyo_ust
# double, distance between tags/reflectors
export ROBOT_DOCKING_STATION_TAG_DISTANCE=0.265
# double, max distance to detect the station
export ROBOT_DOCKING_STATION_TAG_MAX_DISTANCE_DETECTION=3.5
# 2d scan topic used for perception purposes (two tag locator)
export ROBOT_PERCEPTION_SCAN_TOPIC=front_laser/scan
# rgb camera topic used for perception purposes (ar locator)
export ROBOT_PERCEPTION_CAMERA_TOPIC=front_rgbd_camera/rgb/image_raw
# rgb camera info topic used for perception purposes (ar locator)
export ROBOT_PERCEPTION_CAMERA_INFO_TOPIC=front_rgbd_camera/rgb/camera_info


# LOCALIZATION PARAMETERS
# The topic that amcl is using to locate the robot
export ROBOT_LOCALIZATION_SCAN_TOPIC=front_laser/scan
# Type of odometry used for the localization algorithm (mainly amcl). Values: diff, omni
export ROBOT_LOCALIZATION_ODOM_MODEL=omni
# Folder to save the maps
export ROBOT_MAPS_FOLDER=$HOME/maps

# NAVIGATION PARAMETERS
# true, false
export ROBOT_HAS_DOCKER=true
# true, false
export ROBOT_DOCKER_RUN_CAMERA=true
# true, false
export ROBOT_DOCKER_RUN_LASER=true
# summit_xl = -0.641   summit_xls/rbkairos = -0.681
export ROBOT_DOCKER_LASER_BASE_DISTANCE=-0.641
# true, false
export ROBOT_RUN_MOVE=true
# teb, eband
export ROBOT_MOVE_BASE_LOCAL_PLANNER=teb
# rbkairos, summit_xl_steel, summit_xl
export ROBOT_FOOTPRINT_MODEL=rbkairos


# BASE_HW
# The real battery voltage (multimeter) minus the one returned by the drive
export ROBOT_BASE_HW_BATTERY_VOLTAGE_OFFSET=0.0
# K multipliers for analog inputs
export ROBOT_K_ANALOG_INPUTS_MULTIPLIERS=[16.5886,-12.5,1.0,1.0]


# BATTERY ESTIMATION
# Voltage of the battery (24,48)
export ROBOT_BATTERY_VOLTAGE=48
# Read voltage from analog input
export ROBOT_READ_VOLTAGE_FROM_ANALOG_INPUT=true
# Analog input of the driver to read the voltage
export ROBOT_VOLTAGE_ANALOG_INPUT_NUMBER=1
# Analog input of the driver to read the current
export ROBOT_CURRENT_ANALOG_INPUT_NUMBER=2


# CHARGE MANAGER
# disabled, automatic_hw, automatic_sw, manual_sw
export ROBOT_DOCKER_MODE=automatic_sw
# true, false
export ROBOT_BATTERY_INVERTED_CONTACT_RELAY=true
#export ROBOT_BATTERY_CONTACT_RELAY_INPUT_NUMBER=2
#export ROBOT_BATTERY_CHARGER_RELAY_OUTPUT_NUMBER=1

# ROBOT_LOCAL_CONTROL
export ROBOT_RLC_ROSTFUL_SERVER_IP=127.0.0.1
export ROBOT_RLC_ROSTFUL_SERVER_PORT=8080
# distance offset for the dock action (negative value!)
export ROBOT_RLC_CHARGE_DOCK_OFFSET_X=-0.75
export ROBOT_RLC_CHARGE_DOCKER_NAMESPACE=omni_docker
export ROBOT_RLC_CHARGE_STEP_DISTANCE=0.1
# frame used to identify the docking_station. It can be different depending on the sensors and locators being used
export ROBOT_RLC_CHARGE_FRAME=robot_docking_station_laser